->
const hobbies = ["cricket", "volleyball"];
hobbies.push("football");
hobbies.forEach((hobby) => {
  console.log(hobby);
  console.log(hobby);
});


-> Type coercion:
console.log(2 + 3);
console.log(String(2) + String(3));
console.log(Number('2') + 3);
console.log('2' + 3);


-> 
const numbers = [1, 2, 3, 4, 5];
console.log(numbers); // [ 1, 2, 3, 4, 5 ]

numbers.pop(5);
console.log(numbers); // [ 1, 2, 3, 4 ]

numbers.push(9);
console.log(numbers); // [ 1, 2, 3, 4, 9 ]

numbers.length = 0; // clear the array
console.log(numbers); // []


->
function multiply (num1,num2){
    let result = num1 * num2;
    return result;
}

console.log(multiply(4,7));


-> 
function multiply(num1, num2) {
  return num1 * num2;
}

console.log(multiply(4, 7));


-> using an arrow function:
const multiply = (num1, num2) => {
  let result = num1 * num2;
  return result;
}

console.log(multiply(4, 7));


-> 
const multiply = (num1, num2) => num1 * num2;

console.log(multiply(4, 7));


-> 
const functionWithReturnValue = () => "hello";

console.log(functionWithReturnValue());


->
let question =  'Life, the universe and everything?'
let answer = 42
console.log(`${question}, ${answer}`)


->
let p = new Promise((resolve, reject) => {
  let a = 1 + 1;
  if (a == 2) {
    resolve("Success");
  } else {
    reject("Failed");
  }
});

p.then((message) => {
  console.log("This is in the then " + message);
}).catch((message) => {
  console.log("This is in the then " + message);
});


->
function isPrime(num) {
  if (num <= 1) {
    return false;
  }
  
  for (let i = 2; i <= Math.sqrt(num); i++) {
    if (num % i === 0) {
      return false;
    }
  }
  
  return true;
}

function listPrimeNumbers(limit) {
  const primeNumbers = [];
  
  for (let i = 2; i <= limit; i++) {
    if (isPrime(i)) {
      primeNumbers.push(i);
    }
  }
  
  return primeNumbers;
}

const limit = 100; // Change this to the desired limit
const primes = listPrimeNumbers(limit);
console.log("Prime numbers up to", limit, ":", primes);


-> //added error handling code for the case when the limit is given a string value,
function isPrime(num) {
    if (num <= 1) {
      return false;
    }
    
    for (let i = 2; i <= Math.sqrt(num); i++) {
      if (num % i === 0) {
        return false;
      }
    }
    
    return true;
  }
  
  function listPrimeNumbers(limit) {
    if (typeof limit !== 'number') {			// if (isNaN(limit))
      throw new Error('limit must be a number');
    }
  
    const primeNumbers = [];
  
    for (let i = 2; i <= limit; i++) {
      if (isPrime(i)) {
        primeNumbers.push(i);
      }
    }
  
    return primeNumbers;
  }
  
  const limit = 'naveen'; // Change this to the desired limit
  
  try {
    const primes = listPrimeNumbers(limit);
    console.log("Prime numbers up to", limit, ":", primes);
  } catch (error) {
    console.error(error.message);
  }
  
  
->
function getRectArea(width, height) {
  if (isNaN(width) || isNaN(height)) {     // it is better to use if (typeof width !='number' || typeof height !='number') 
    throw new Error("Parameter must be a number");
  }
  return width * height;
}

try {
  console.log(getRectArea(3, 'A'));
} catch (error) {
  console.error(error.message);
}


-> //use the arrow function
const getRectArea = (width, height) => {
    if (isNaN(width) || isNaN(height)) {
      throw new Error("Parameter must be a number");
    }
    return width * height;
  };
  
  try {
    console.log(getRectArea(3, 4));
  } catch (error) {
    console.error(error.message);
  }
  
  
-> Above code using class and constructor
class Rectangle {
  constructor(width, height) {
    this.width = width;
    this.height = height;
  }

  getArea() {
    if (isNaN(this.width) || isNaN(this.height)) {
      throw new Error("Parameter must be a number");
    }
    return this.width * this.height;
  }
}

try {
  const rectangle = new Rectangle(3, 4);
  console.log(rectangle.getArea());
} catch (error) {
  console.error(error.message);
}


-> 
function isPalindrome(string) {
  let reversedString = "";
  for (let i = string.length - 1; i >= 0; i--) {
    reversedString += string[i];
  }

  return string === reversedString;
}

let string = "racecar";
console.log(isPalindrome(string));


-> Count the number of characters in a string:
function countCharacters(str) {
  return str.length;
}

const inputString = "Hello, World!";
const characterCount = countCharacters(inputString);
console.log("Number of characters:", characterCount);


-> 
function reverseString(str) {
  return str.split("").reverse().join("");
}

const inputString = "Hello, World!";
const reversedString = reverseString(inputString);
console.log("Reversed string:", reversedString);


-> Count the number of vowels in a string:
function countVowels(string) {
  var vowels = "aeiou";
  var count = 0;
  for (var i = 0; i < string.length; i++) {
    if (vowels.indexOf(string[i]) !== -1) {
      count++;
    }
  }
  return count;
}

console.log(countVowels("naveen"))


-> Reverse a string:
function reverseString(string) {
  var reversedString = "";
  for (var i = string.length - 1; i >= 0; i--) {
    reversedString += string[i];
  }
  return reversedString;
}

console.log(reverseString("naveen"))


-> Find the first occurrence of a substring in a string:
function findSubstring(string, substring) {
  var index = string.indexOf(substring);
  if (index === -1) {
    return null;
  } else {
    return index;
  }
}

console.log(findSubstring("it is too cool","is"));


-> Replace all occurrences of a substring in a string with another substring:
function replaceSubstring(string, substring, replacement) {
  var newString = "";
  var index = string.indexOf(substring);
  while (index !== -1) {
    newString += string.substring(0, index) + replacement;
    string = string.substring(index + substring.length);
    index = string.indexOf(substring);
  }
  newString += string;
  return newString;
}


console.log(replaceSubstring("it is too cool is","is","was"));


-> 
function fibonacci(n) {
  let num1 = 0, num2 = 1;
  let counter = 0;

  while (counter < n) {
    console.log(num1);

    // Swap
    let num3 = num1 + num2;
    num1 = num2;
    num2 = num3;
    counter = counter + 1;
  }
}

fibonacci(10);


->
function isPalindromeNumber(num) {
  let reversedNum = 0;
  let originalNum = num;

  while (num !== 0) {
    let remainder = num % 10;
    reversedNum = reversedNum * 10 + remainder;
    num = Math.floor(num / 10);
  }

  if (originalNum === reversedNum) {
    console.log(originalNum + " is Palindrome");
  } else {
    console.log(originalNum + " is not a Palindrome");
  }
}

let num = 3553;
isPalindromeNumber(num);


->
function swapTwoStrings() {
  let s1 = "Naveen";
  let s2 = "Barre";

  display("Before Swapping :", s1, s2);

  s1 = s1 + s2;
  // Swap
  s2 = s1.substring(0, s1.length - s2.length);

  s1 = s1.substring(s2.length);
  
  display("After Swapping :", s1, s2);
}

function display(str, s1, s2) {
  console.log(str);
  console.log("s1 : " + s1);
  console.log("s2 : " + s2);
}

swapTwoStrings();


->
function findNumber() {
  let arrayOfInts = [32, 87, 3, 589, 12, 1076, 2000, 8, 622, 127];
  
  let isPresent = arrayOfInts.some(num => num === 12);
  
  if (isPresent) {
    console.log("Found");
  } else {
    console.log("Not found");
  }
}

findNumber();


->
function findString() {
  let nameArray = ["Bill", "Connor", "Joe", "John", "Mark"];
  
  let isPresent = nameArray.includes("Joe");     // const isPresent = nameArray.includes("Joe");
  
  if (isPresent) {
    console.log("Found");
  } else {
    console.log("Not found");
  }
}

findString();

We can use `const` instead of `let` to declare the `isPresent` variable. Since the isPresent variable is assigned the result of the includes() method and its value doesn't change after assignment, using const is more appropriate.


-> //using an arrow function
const findString = () => {
  let nameArray = ["Bill", "Connor", "Joe", "John", "Mark"];

  let isPresent = nameArray.includes("Joe");

  if (isPresent) {
    console.log("Found");
  } else {
    console.log("Not found");
  }
};

findString();


-> //using an arrow function
const findString = (nameArray) => {
  const isPresent = nameArray.includes("Joe");

  if (isPresent) {
    console.log("Found");
  } else {
    console.log("Not found");
  }
};

findString(["Bill", "Connor", "Joe", "John", "Mark"]);


->
function checkAnagram() {
  let str1 = "Race";
  let str2 = "Care";

  str1 = str1.toLowerCase();
  str2 = str2.toLowerCase();

  // check if length is same
  if (str1.length === str2.length) {
    // convert strings to char array
    let charArray1 = str1.split("");
    let charArray2 = str2.split("");

    // sort the char array
    charArray1.sort();
    charArray2.sort();

    // if sorted char arrays are same, then the strings are anagrams
    let result = charArray1.every((char, index) => char === charArray2[index]);

    if (result) {
      console.log(str1 + " and " + str2 + " are anagrams.");
    } else {
      console.log(str1 + " and " + str2 + " are not anagrams.");
    }
  } else {
    console.log(str1 + " and " + str2 + " are not anagrams.");
  }
}

checkAnagram();


->
function displayEvenOdd() {
  const numbers = [1, 2, 3, 4, 5, 6, 7, 8];

  displayEvenNumbers(numbers);
  displayOddNumbers(numbers);
}

function displayEvenNumbers(numbers) {
  console.log("Even Numbers");
  
  numbers.filter(number => number % 2 === 0)
         .forEach(number => console.log(number));
}

function displayOddNumbers(numbers) {
  console.log("Odd Numbers");
  
  numbers.filter(number => number % 2 !== 0)
         .forEach(number => console.log(number));
}

displayEvenOdd();


->
function checkTheSubstring() {
  let sentence = "I Love Java Programming";
  let word = "IPhone";

  checkStringUsingIncludes(sentence, word);
  checkStringUsingIndexOf(sentence, word);
}

function checkStringUsingIncludes(sentence, word) {
  if (sentence.includes(word)) {
    console.log(word + " exists in '" + sentence + "'");
  } else {
    console.log(word + " does not exist in '" + sentence + "'");
  }
}

function checkStringUsingIndexOf(sentence, word) {
  if (sentence.indexOf(word) !== -1) {
    console.log(word + " exists in '" + sentence + "'");
  } else {
    console.log(word + " does not exist in '" + sentence + "'");
  }
}

checkTheSubstring();


-> 
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat
const date = new Date();
const dateTimeFormat = new Intl.DateTimeFormat(undefined, {
  day: '2-digit',
  month: 'long',
  year: 'numeric',
  hour: 'numeric',
  minute: 'numeric',
  second: '2-digit',
  year: 'numeric',  
  timeZone: 'Asia/Kolkata'  
});

const formattedDate = dateTimeFormat.format(date);
console.log(formattedDate);


->
const date = new Date();
const dateTimeFormat = new Intl.DateTimeFormat('en-US', {
  day: '2-digit',
  month: '2-digit',
  year: 'numeric',
  hour: 'numeric',
  minute: 'numeric',
  second: 'numeric',  
  hour12: true
});

const formattedDate = dateTimeFormat.format(date);
console.log(formattedDate); // 07/03/2023, 10:19:27 AM


-> 
class DateFormatter {
  static formatDate(date, format) {
    const options = {
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "numeric",
      minute: "numeric",
      second: "numeric",
      hour12: true,
      timeZone: "UTC"
    };

    return new Intl.DateTimeFormat(undefined, options).format(date);
  }
}

const date = new Date();
const formattedDate = DateFormatter.formatDate(date, "MMMM d, yyyy hh:mm:ss a");
console.log(formattedDate);


-> Fetch API ( https://www.youtube.com/watch?v=cuEtnrL9-H0 )

// console.log(fetch('https://reqres.in/api/users'));

fetch("https://reqres.in/api/users/1")
  .then((response) => {
    if (response.ok) {
      console.log("SUCCESS");
    } else {
      console.log("Not Successful");
    }
    return response.json();
  })
  .then((data) => console.log(data))
  .catch((error) => console.log(error));
  
  
-> 
function resolveAfter2Seconds() {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve("resolved");
    }, 2000);
  });
}

async function asyncCall() {
  console.log("calling");
  const result = await resolveAfter2Seconds();
  console.log(result);
  // Expected output: "resolved"
}

asyncCall();

The above code demonstrates the usage of async functions and the await keyword to handle asynchronous operations.

The resolveAfter2Seconds function returns a promise that resolves after a delay of 2 seconds. It uses the setTimeout function to schedule the resolution of the promise with the value 'resolved' after the specified delay.

The asyncCall function is an async function that demonstrates the use of await. When asyncCall is invoked, it starts executing its code sequentially. In this case, it first logs 'calling' to the console.

The line `const result = await resolveAfter2Seconds();` is where the await keyword is used. It pauses the execution of the asyncCall function until the promise returned by resolveAfter2Seconds resolves. This allows the function to "wait" for the promise to be fulfilled without blocking the execution.

After the promise resolves (after 2 seconds in this case), the value 'resolved' is assigned to the result variable. Then, the console.log(result) statement is executed, which logs 'resolved' to the console.


-> 
async function fetchData() {
  try {
    const response = await fetch("https://reqres.in/api/users");    // https://www.boredapi.com/api/activity
    const data = await response.json();
    console.log(data);
  } catch (error) {
    console.log("Error:", error);
  }
}

fetchData();

Above is an example of an async function in JavaScript.

In this example, the fetchData function fetches data from an API asynchronously using the fetch function. The await keyword is used to pause the execution of the function until the promise returned by fetch resolves. Once the promise resolves, the function continues its execution, and the retrieved data is logged to the console.

Async functions provide a convenient way to handle promises and enable better control flow in asynchronous programming.