-> Life cycle of spring bean
Instantiate - Populate Properties - BeanNameAware's setBeanName() - BeanFactoryAware's setBeanFactory() - ApplicationContextAware's setApplicationContext() - Preinitialization BeanPostProcessors - InitializingBean's afterPropertiesSet() - Call Custom init method - Postinitialization BeanPostProcessors - Bean is ready to use - container shutdown - DisposableBean's destroy() - Call Custom Destroy method
https://howtodoinjava.com/spring-core/spring-bean-life-cycle/
https://mkyong.com/spring/spring-init-method-and-destroy-method-example/
https://docs.spring.io/spring-framework/docs/3.0.0.M4/reference/html/ch03s06.html


-> disabling the Web Server in spring boot
If your classpath contains the necessary bits to start a web server, Spring Boot will automatically start it. To disable this behavior configure the WebApplicationType in your application.properties, as shown in the following example:

spring.main.web-application-type=none

https://docs.spring.io/spring-boot/docs/2.1.9.RELEASE/reference/html/howto-embedded-web-servers.html


-> Dependency Injection
https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-dependencies


-> AOP:
In any application, there is some generic functionality that is needed in many places. But this functionality is not related to the application's business logic. Suppose you perform a role-based security check before every business method in your application. Here security is a cross-cutting concern. It is required for any application but it is not necessary from the business point of view, it is a simple generic functionality we have to implement in many places in the application. The following are examples of the cross-cutting concerns for the enterprise application.

Logging and tracing
Transaction management
Security
Caching
Error handling
Performance monitoring
Custom business rules


-> https://www.youtube.com/watch?v=zZTNeTz1YXM (Programmatic Bean Registration with Spring Framework 5.0 - Josh Long)

-> https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc   Exception Handling in Spring MVC
https://dzone.com/articles/handling-exceptions-using-springs-aop
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/NestedRuntimeException.html

-> The DispatcherServlet 
https://docs.spring.io/spring-framework/docs/3.0.0.M4/spring-framework-reference/html/ch15s02.html

->
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/package-summary.html



-> Here are just a few of the features in Spring Boot:
Opinionated ‘starter' dependencies to simplify the build and application configuration
Embedded server to avoid complexity in application deployment
Metrics, Health check, and externalized configuration using Spring Boot Actuator

-> Exception handling in Spring
https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc


-> Autowiring modes:
https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-autowired-exceptions


BeanFactory Interface:
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/BeanFactory.html

ApplicationContext Interface:
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/ApplicationContext.html

https://www.baeldung.com/spring-beanfactory-vs-applicationcontext
BeanFactory:  Lazy Loading ,  loads beans on-demand and handy in memory-constrained systems.
ApplicationContext: Eager Loading, loads all beans at startup and is  preferred for most use cases.
ApplicationContext supports all types of bean scopes, but the BeanFactory only supports two scopes — Singleton and Prototype. Therefore, it's always preferable to use ApplicationContext when building complex enterprise applications.

-> BeanFactory or ApplicationContext:
BeanFactory and ApplicationContext are both interfaces in the Spring Framework that provide a way to manage and configure beans. 

BeanFactory is a more basic interface that provides only the basic features of an IoC container. It can be used to create, configure, and retrieve beans.

ApplicationContext is an extension of BeanFactory that provides additional features, such as:
Internationalization support
Event publishing
A wider range of bean scopes
Support for annotation-based dependency injection

https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-beanfactory

-> @Controller vs @RestController
The @Controller and @RestController annotations are both used in Spring MVC to define web controllers. However, there are some key differences between the two annotations.

@Controller is a more general annotation that can be used to define any type of web controller. It can be used to create controllers that return HTML views, XML views, or JSON data.
@RestController is a more specialized annotation that is specifically designed for creating RESTful web services. RESTful web services return data in a format that is easily consumable by other applications, such as JSON or XML.
In general, you should use @RestController if you are creating a RESTful web service. If you are creating a controller that returns HTML views or XML views, you can use @Controller.

Here is a table that summarizes the key differences between @Controller and @RestController:

Feature			@Controller							@RestController
Annotation		@Controller							@RestController
Purpose 		Defines any type of web controller	Defines a RESTful web service
Data format		HTML, XML, or JSON					JSON or XML

The @RestController annotation is a convenience annotation that combines the @Controller and @ResponseBody annotations. This means that you do not need to explicitly annotate your controller methods with @ResponseBody when using @RestController.


https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Controller.html
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/package-summary.html

A convenience annotation that is itself annotated with @Controller and @ResponseBody.
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html


-> @RequestBody

The @RequestBody annotation can be used to bind the entire request body to a method parameter. In below example, the entire request body is bound to the book method parameter, which is a Book object.


@RestController
public class BookController {

    @PostMapping("/books")
    public Book createBook(@RequestBody Book book) {
        // Save the book
        return book;
    }

}

When a user requests the /books URL with a JSON request body that contains the properties of a book, the createBook() method will be called and the book will be saved.

The @RequestBody annotation is a powerful tool that can be used to bind request bodies to method parameters. This makes it easy to access data from the request and use it to perform actions.

Here is an example of a JSON request body that can be used to create a book:
{
  "title": "The Book of Secrets",
  "author": "John Doe"
}

When this request body is sent to the /books URL, the createBook() method will be called and the book will be saved.

The @RequestBody annotation can be used to bind request bodies of any type. This makes it possible to create RESTful web services that can be used to create, update, delete, and query data.


-> @RequestParam

The @RequestParam annotation can be used to bind a request parameter to a method parameter. In the below example, the title and author request parameters are bound to the title and author method parameters, respectively.

@RestController
public class BookController {

    @GetMapping("/books/{id}")
    public Book getBook(@PathVariable int id) {
        return findBookById(id);
    }

    @PostMapping("/books")
    public Book createBook(@RequestParam String title, @RequestParam String author) {
        return createBook(title, author);
    }

    private Book findBookById(int id) {
        // ...
    }

    private Book createBook(String title, String author) {
        // ...
    }

}

When a user requests the /books URL with the title and author request parameters, the createBook() method will be called and a new book will be created with the specified title and author.


-> @PathVariable vs @RequestMapping

@RequestParam is used to capture query parameters from the URL, while @PathVariable is used to capture values from the URL path.

@PathVariable and @RequestParam are annotations used in Spring MVC to bind request parameters to method arguments.

@PathVariable is used to bind values from the URI path to method arguments. For example, if the URI path is /users/{id}, the id value can be bound to a method argument using the @PathVariable annotation.
@RequestParam is used to bind values from the query string to method arguments. For example, if the query string is ?name=John, the name value can be bound to a method argument using the @RequestParam annotation.

Here is a table summarizing the key differences between @PathVariable and @RequestParam: 

Feature		@PathVariable	@RequestParam
Location	URI path		Query string
Type		Variable		Parameter
Encoding	Not encoded		Encoded
Optional	Yes				Yes

https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/PathVariable.html
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/RequestMapping.html


-> stereotype annotations 

stereotype annotations are a set of annotations that provide a way to mark and identify certain classes as specific types of Spring components. These annotations help in auto-detection and configuration of Spring beans, allowing the Spring framework to understand the role and purpose of the annotated classes.

stereotype annotations provide a way to categorize and differentiate the various types of components in a Spring application. They help in component scanning and automatic bean registration by Spring's context configuration. By using these annotations, you can benefit from the convenience and flexibility of Spring's dependency injection and component management features.

Component: Indicates that an annotated class is a "component".

Controller: Indicates that an annotated class is a "Controller"

Indexed: Indicate that the annotated element represents a stereotype for the index.

Repository: Indicates that an annotated class is a "Repository", originally defined by Domain-Driven Design (Evans, 2003) as "a mechanism for encapsulating storage, retrieval, and search behavior which emulates a collection of objects".

Service: Indicates that an annotated class is a "Service", originally defined by Domain-Driven Design (Evans, 2003) as "an operation offered as an interface that stands alone in the model, with no encapsulated state."

https://docs.spring.io/spring-framework/docs/6.0.9/javadoc-api/org/springframework/stereotype/package-summary.html


-> Bean Scopes

singleton
(Default) Scopes a single bean definition to a single object instance for each Spring IoC container.

prototype
Scopes a single bean definition to any number of object instances.

request
Scopes a single bean definition to the lifecycle of a single HTTP request. That is, each HTTP request has its own instance of a bean created off the back of a single bean definition. Only valid in the context of a web-aware Spring ApplicationContext.

session
Scopes a single bean definition to the lifecycle of an HTTP Session. Only valid in the context of a web-aware Spring ApplicationContext.

application
Scopes a single bean definition to the lifecycle of a ServletContext. Only valid in the context of a web-aware Spring ApplicationContext.

websocket
Scopes a single bean definition to the lifecycle of a WebSocket. Only valid in the context of a web-aware Spring ApplicationContext.


-> What is the difference between singleton and prototype scopes?

The singleton scope is a good choice for beans that are shared across multiple objects or threads.
The prototype scope is a good choice for beans that are created and destroyed for each request.

a) Singleton scope creates a single instance of the bean and shares it across the entire application context, while prototype scope creates a new instance of the bean every time it is requested.
b) Singleton beans are thread-safe by default, while prototype beans may not be thread-safe unless proper synchronization is implemented.
c) Changes made to a singleton bean's state are visible to all parts of the application, while changes made to a prototype bean's state are limited to the scope of that specific instance.
















