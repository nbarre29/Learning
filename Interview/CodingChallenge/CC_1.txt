
____________________________________________________

https://www.youtube.com/watch?v=h36mQC3JFMo&list=PLqq-6Pq4lTTZgXnsBNQwCWdKR6O6Cgk1Z

public class Ch01FizzBuzz {

	public static void main(String[] args) {
		printFizzBuzz(100);

	}

	public static void printFizzBuzz(int n) {
		for (int i = 1; i <= n; i++) {
			if ((i % 3 == 0) && (i % 5 == 0)) {
				System.out.println("FizzBuzz");
			} else if (i % 3 == 0) {
				System.out.println("Fizz");

			} else if (i % 5 == 0) {
				System.out.println("Buzz");
			} else {
				System.out.println(i);
			}

		}
	}

}
----------------------------------------------------
import java.util.stream.IntStream;

public class FizzBuzz {
    public static void main(String[] args) {
        IntStream.rangeClosed(1, 100)
                .mapToObj(FizzBuzz::fizzBuzz)
                .forEach(System.out::println);		// IntStream.rangeClosed(1, 100).boxed().map(FizzBuzz::fizzBuzz)
    }

    private static String fizzBuzz(int number) {
        return (number % 3 == 0 && number % 5 == 0) ? "FizzBuzz"
                : (number % 3 == 0) ? "Fizz"
                : (number % 5 == 0) ? "Buzz"
                : String.valueOf(number);
    }

}

____________________________________________________
Given an array of integers, return indices of the two numbers such that they add up to a specific target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
Example:
Given nums = [2,7,11,15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1]

import java.util.HashMap;
import java.util.Map;

public class Ch02TwoSum {

	public static void main(String[] args) {
		int[] numbers = new int[] { 2, 3, 7, 4, 8 };
		int target = 7;
		int[] result = getTwoSum(numbers, target);
		System.out.println(result[0] + " " + result[1]);

	}

	public static int[] getTwoSum(int[] numbers, int target) {
		Map<Integer, Integer> visitedNumbers = new HashMap<>();
		for (int i = 0; i < numbers.length; i++) {
			int delta = target - numbers[i];
			if (visitedNumbers.containsKey(delta)) {
				return new int[] { i, visitedNumbers.get(delta) };
			}
			visitedNumbers.put(numbers[i], i);
		}
		return new int[] { -1, -1 };

	}

}
____________________________________________________

https://www.youtube.com/watch?v=gy1uve2BwG8&list=PLqq-6Pq4lTTZgXnsBNQwCWdKR6O6Cgk1Z&index=4
//Reverse a String 
public class Ch03ReverseString {

	public static void main(String[] args) {
		
		String str = "Hello World!";
		System.out.println(reverseWithStringBuilder(str));
		System.out.println(reverseManually(str));
		System.out.println(reverseManuallyWithoutStringBuilder(str));

	}
	
	private static String reverseWithStringBuilder(String str) {
		return new StringBuilder(str).reverse().toString();
	}
	
	private static String reverseManually(String str) {
		StringBuilder sb = new StringBuilder();
		
		for (int i = str.length() - 1; i >= 0 ; i--) {
			sb.append(str.charAt(i));
		}
		return sb.toString();
	}
	
	private static String reverseManuallyWithoutStringBuilder(String str) {
		String reversedString ="";
		for (int i = str.length() - 1; i >= 0 ; i--) {
			reversedString = reversedString + str.charAt(i);
			
		}
		return reversedString;
	}

}
____________________________________________________
https://www.youtube.com/watch?v=-ToGzpENG5k&list=PLqq-6Pq4lTTZgXnsBNQwCWdKR6O6Cgk1Z&index=5

//Reverse an Integer value
public class Test {

    private static int reverse (int input){
        long reversed = 0;
        while (input != 0){
            reversed = reversed * 10 + input % 10;
            input /= 10;
            if (reversed > Integer.MAX_VALUE || reversed < Integer.MIN_VALUE){
                return 0;
            }
        }

        return (int) reversed;
    }

    public static void main(String[] args) {
        System.out.println(reverse(213));
    }
}
----------------------------------------------------

public class ReverseNumber {

    public static void main(String[] args) {
        int num = 123;
        int reverse = 0;
        while (num !=0){
            reverse = reverse *10;
            reverse = reverse + num %10;
            num = num/10;
        }

        System.out.println("Reverse is: " + reverse);
    }
}
____________________________________________________
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class LongestStrings {
    public static List<String> longestStrings(String... arguments) {
        int longestLength = Arrays.stream(arguments)
                .mapToInt(String::length)
                .max()
                .orElse(0);

        return Arrays.stream(arguments)
                .filter(str -> str.length() == longestLength)
                .collect(Collectors.toList());
    }

    public static void main(String[] args) {
        List<String> result = longestStrings("apple", "banana", "cherry", "orange", "kiwi");
        System.out.println(result); // Output: ["banana", "cherry"]
    }
}
____________________________________________________