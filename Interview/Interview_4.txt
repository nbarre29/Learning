https://aws.amazon.com/what-is/database-sharding/

https://www.developer.com/java/how-to-concatenate-strings-in-java/

https://www.youtube.com/watch?v=h8eyY7dIiN4&t=1176s (Quicksort Sort Algorithm in Java - Full Tutorial With Source)

-> Explain the equals() and hashCode() methods.

equals(): The equals() method is used to compare the equality of two objects. It is defined in the Object class and can be overridden in custom classes to provide a meaningful comparison based on the object's properties.

By default, the equals() method compares object references and returns true if the references point to the same memory location. However, this default behavior may not be suitable for custom classes, where equality should be determined based on the object's content.

hashCode(): The hashCode() method returns an integer value (the hash code) that represents the object's internal memory address or unique identifier. It is also defined in the Object class and can be overridden in custom classes.

The primary purpose of hashCode() is to provide a mechanism for efficient retrieval and storage of objects in hash-based data structures. Hash-based collections like HashMap and HashSet use the hash code to determine the object's bucket location or position.


-> What is the purpose of the transient keyword in Java?

The transient keyword in Java is used to prevent a field from being serialized. Serialization is the process of writing the state of an object to a byte stream so that it can be stored or transmitted. When an object is serialized, all of its fields are included in the sequence of bytes, unless they are marked as transient.

There are several reasons why we might want to use the transient keyword. For example, we might want to prevent sensitive data from being serialized, such as a user's password. Or, we might want to prevent a field from being serialized because it is not relevant to the object's state.

Performance optimization: Serialization and deserialization can be resource-intensive operations. By marking non-essential or large fields as transient, you can reduce the size of the serialized data and improve the overall performance of serialization and deserialization.

External dependencies: Fields that are tied to external resources, such as database connections or network sockets, may not be serializable or need to be reestablished after deserialization. In such cases, marking those fields as transient avoids issues with serialization and ensures proper initialization of the resources after deserialization.

Caching: In scenarios where a field holds cached or temporary data that can be recomputed later, marking it as transient prevents the unnecessary persistence of the cached data. The field can be recomputed or reloaded as needed upon deserialization.


-> Explain the difference between == and .equals() for object comparison.

In Java, the == operator and the .equals() method are used for object comparison.

== operator: The == operator in Java is used to compare the equality of two objects based on their reference. It checks if the two object references point to the same memory location, i.e., if they are the same instance of an object. When == is used to compare objects, it evaluates to true only if the references being compared are pointing to the exact same object in memory.

String str1 = "Hello";
String str2 = "Hello";
String str3 = new String("Hello");

System.out.println(str1 == str2); // true (same reference)
System.out.println(str1 == str3); // false (different references)

.equals() method: The .equals() method is a method defined in the Object class, which can be overridden in custom classes to provide a meaningful comparison based on the object's properties or content. By default, the .equals() method in the Object class behaves the same as the == operator, comparing the references for equality.
For two strings it will compare character by character to check for the equality.


-> What are the different types of inner classes in Java?
https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html


-> what is synchronization?
Synchronization is the capability to control the access of multiple threads over shared resources. When a thread acquires a lock on a shared resource, other threads that attempt to acquire the same lock will be blocked until the first thread releases the lock. This ensures that only one thread can access the shared resource at a time, which prevents data corruption and other problems.


-> Interface , Abstract class

Interface is used to model the behavior of classes. It shouldn't be used as a placeholder of constants.
Abstract classes are mostly used in API implementations where we get rid of boilerplate code. Template method pattern is an example.


-> What is the purpose of the final keyword in Java?

The final keyword provides guarantees of immutability, integrity, and consistency in various contexts, whether it is for variables, methods, or classes. It helps in creating robust and secure code by preventing accidental modifications or undesired inheritance.

Final Variable: A final variable is a variable that cannot be changed after it is initialized. 

Final variables must be initialized either at the time of declaration or within the constructor of the class. Final variables are typically written in uppercase letters to distinguish them from regular variables.

final int MAX_VALUE = 10;


Final Method: A final method is a method that cannot be overridden by a subclass. This prevents subclasses from changing the implementation of the method defined in the superclass. Marking a method as final can be useful when you want to ensure that the behavior of a method remains consistent across all subclasses.

Final Class: A final class is a class that cannot be extended by a subclass. This can be useful when you want to prevent further specialization or extension of a class, such as utility classes or classes that are not intended to be inherited.


-> What is the purpose of the static keyword in Java?

The static keyword in Java is used to declare variables, methods, and nested classes that are associated with a class rather than with an instance of the class. This means that there is only one copy of the static variable, method, or nested class, regardless of how many instances of the class are created.

Static blocks: Static blocks are used to initialize static variables or perform one-time initialization tasks for the class. They are executed when the class is loaded into memory, before any objects are created or any static methods are called. Static blocks are typically used for complex or resource-intensive initialization that cannot be accomplished with a simple assignment statement.

public class InitializationExample {
    private static int value;

    static {
        // Complex initialization logic
        value = calculateInitialValue();
    }

    // Rest of the class implementation
}


-> What is the use of the super keyword in Java?

The super keyword in Java is used to refer to the immediate parent class of a subclass. It has several use cases:

a) Accessing parent class members: When a subclass overrides a method or hides a variable from its parent class, the super keyword can be used to access the hidden or overridden members of the parent class. This is useful when you want to invoke the parent class implementation of a method or access parent class variables.

Example:

class Parent {
    int x = 10;

    void display() {
        System.out.println("Parent class");
    }
}

class Child extends Parent {
    int x = 20;

    void display() {
        System.out.println("Child class");
    }

    void show() {
        System.out.println("Child x: " + x);
        System.out.println("Parent x: " + super.x);
        super.display();
    }
}

public class Main {
    public static void main(String[] args) {
        Child child = new Child();
        child.show();
    }
}

Output:
Child x: 20
Parent x: 10
Parent class

b) Invoking parent class constructors: The super keyword can also be used to invoke the constructor of the parent class from the constructor of the subclass. This is necessary when the parent class has a parameterized constructor that needs to be called to perform initialization.

class Parent {
    int x;

    Parent(int x) {
        this.x = x;
    }
}

class Child extends Parent {
    int y;

    Child(int x, int y) {
        super(x); // Invoke the constructor of the parent class
        this.y = y;
    }
}

public class Main {
    public static void main(String[] args) {
        Child child = new Child(10, 20);
        System.out.println("x: " + child.x);
        System.out.println("y: " + child.y);
    }
}

Output:
x: 10
y: 20


-> Marker interface:

A marker interface is an interface that does not define any methods. It provides run-time type information about objects, so the compiler and JVM have additional information about the object. A marker interface is also called a tagging interface.

The Serializable interface does not have any methods, so there is no need to provide any implementation. The compiler will simply assume that the class has the necessary behavior to be serialized.

It is important to note that marker interfaces do not provide any functionality. They are simply used to indicate special properties of a class. The actual behavior of a class that implements a marker interface is up to the class itself.

Here are some examples of how marker interfaces can be used to indicate special properties of a class:

The Serializable interface is used to indicate that a class can be serialized to a stream and deserialized later.
The Cloneable interface is used to indicate that a class can be cloned.
The Remote interface is used to indicate that a class can be accessed remotely.
Marker interfaces can be used by the compiler and other tools to provide additional information about a class and its behavior. This can be useful for things like code analysis, debugging, and documentation.

some of the most common marker interfaces in Java:

java.io.Serializable
java.lang.Cloneable
java.rmi.Remote
javax.servlet.SingleThreadModel
java.util.RandomAccess
java.util.EventListener















