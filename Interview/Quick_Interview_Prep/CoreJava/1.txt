-> What is a Wrapper Class?

A wrapper class in Java is a class that encapsulates a primitive data type (e.g., int, double) into an object. Java provides a wrapper class for each primitive type. These classes are found in the java.lang package.

For example:
byte     → Byte
short    → Short
int      → Integer
long     → Long
float    → Float
double   → Double
char     → Character
boolean  → Boolean


Real Uses of Wrapper Classes

    Working with Collections: Collections like ArrayList or HashMap can only store objects, not primitives. Wrapper classes allow you to store primitive values in collections by wrapping them into objects.
    Autoboxing and Unboxing: Java automatically converts between primitives and wrapper objects when needed.
    Type Conversion: Wrapper classes provide utility methods for converting between strings and numeric types, e.g., Integer.parseInt.
    Nullability: Wrapper classes can hold a null value, unlike primitives, which can be useful in certain contexts (e.g., database operations).
    Constants and Utility Methods: Wrapper classes provide constants (MAX_VALUE, MIN_VALUE) and utility methods (e.g., toString, valueOf).
	
	
Example: Storing int Values in an ArrayList

Here’s how you can use a wrapper class to store primitive int values in an ArrayList:

import java.util.ArrayList;
import java.util.List;

public class WrapperClassArrayListExample {
    public static void main(String[] args) {
        // Create an ArrayList to store Integer objects
        List<Integer> intList = new ArrayList<>();

        // Add primitive int values (autoboxing occurs here)
        intList.add(10);  // Autoboxing: int 10 is converted to Integer
        intList.add(20);
        intList.add(30);

        // Retrieve and print the values (unboxing occurs here)
        System.out.println("Stored values in the ArrayList:");
        for (Integer value : intList) {
            System.out.println(value); // Unboxing: Integer to int
        }

        // Perform arithmetic using retrieved values
        int sum = 0;
        for (Integer value : intList) {
            sum += value; // Unboxing and adding to sum
        }
        System.out.println("Sum of values: " + sum);
    }
}

Explanation of the Code

    ArrayList with Wrapper Class:
        Since ArrayList can only store objects, we use the Integer wrapper class to store int values.

    Autoboxing:
        When adding int values to the ArrayList, Java automatically converts the int to an Integer object.

    Unboxing:
        When retrieving values from the ArrayList, Java automatically converts the Integer objects back to int for arithmetic operations.
		
		
-> Example: Type Conversion Using Integer.parseInt and Other Methods

public class WrapperClassTypeConversion {
    public static void main(String[] args) {
        // Convert a String to an int using Integer.parseInt
        String intString = "123";
        int intValue = Integer.parseInt(intString); // String to int
        System.out.println("String to int: " + intValue);

        // Convert an int to a String using Integer.toString
        int number = 456;
        String numberString = Integer.toString(number); // int to String
        System.out.println("int to String: " + numberString);

        // Convert a String to a double using Double.parseDouble
        String doubleString = "3.14159";
        double doubleValue = Double.parseDouble(doubleString); // String to double
        System.out.println("String to double: " + doubleValue);

        // Convert a double to a String using Double.toString
        double pi = 3.14;
        String piString = Double.toString(pi); // double to String
        System.out.println("double to String: " + piString);

        // Convert a String to a boolean using Boolean.parseBoolean
        String booleanString = "true";
        boolean boolValue = Boolean.parseBoolean(booleanString); // String to boolean
        System.out.println("String to boolean: " + boolValue);

        // Convert a boolean to a String using Boolean.toString
        boolean isJavaFun = true;
        String booleanToString = Boolean.toString(isJavaFun); // boolean to String
        System.out.println("boolean to String: " + booleanToString);
    }
}


-> Can we override a static method in Java?

No, static methods cannot be overridden. Static methods are associated with the class, not with instances of the class. If a static method is re-declared in a subclass, it is called method hiding, not overriding.

class Parent {
    static void staticMethod() {
        System.out.println("Parent static method");
    }
}

class Child extends Parent {
    static void staticMethod() {
        System.out.println("Child static method");
    }
}

public class Test {
    public static void main(String[] args) {
        Parent obj = new Child();
        obj.staticMethod(); // Outputs "Parent static method"
    }
}


-> What happens if we use String in a switch statement?

Starting from Java 7, you can use String in a switch statement. Internally, it uses the hashCode() of the string and compares the cases.

public class Test {
    public static void main(String[] args) {
        String str = "Java";
        switch (str) {
            case "Python":
                System.out.println("Python");
                break;
            case "Java":
                System.out.println("Java");
                break;
            default:
                System.out.println("Other");
        }
    }
}


-> What is the difference between == and .equals() in Java?

== compares object references (memory locations) for objects or values for primitives.
.equals() compares the content of the objects (depending on its implementation).

public class Test {
    public static void main(String[] args) {
        String s1 = new String("Hello");
        String s2 = new String("Hello");

        System.out.println(s1 == s2);        // false (different references)
        System.out.println(s1.equals(s2));  // true (same content)
    }
}


-> What happens if we put a return statement or System.exit(0) in a try block? Will the finally block execute?

If return is used, the finally block will execute before returning the value.
If System.exit(0) is used, the program terminates, and the finally block does not execute.

public class Test {
    public static void main(String[] args) {
        try {
            System.out.println("Try block");
            return;
        } finally {
            System.out.println("Finally block");
        }
    }
}

Output:

Try block
Finally block


public class Test {
    public static void main(String[] args) {
        try {
            System.out.println("Try block");
            System.exit(0);
        } finally {
            System.out.println("Finally block");
        }
    }
}

Output:

Try block


-> What is the difference between final, finally, and finalize()?

    final: A keyword used with variables, methods, and classes to make them constant or prevent overriding/inheritance.
    finally: A block used with try-catch to execute code regardless of exceptions.
    finalize(): A method in Object class called by the garbage collector before destroying an object.
	

-> What happens if two threads call a synchronized instance method on the same object?

Only one thread can execute the synchronized instance method at a time because the intrinsic lock (monitor) of the object is acquired.


-> What is the difference between StringBuilder and StringBuffer?

    StringBuilder is not thread-safe but faster.
    StringBuffer is thread-safe but slower because it synchronizes methods.
	
	
-> Can you have a try block without a catch block?

Yes, you can have a try block without a catch block if you include a finally block.


-> Why is String immutable in Java?

String is immutable for several reasons:

    Thread-safety: Immutable strings are safe for multithreading.
    Caching: Java uses a string pool to store string literals, improving memory efficiency.
    Security: Strings are used in sensitive operations like file paths and network connections. Immutability ensures they cannot be altered.
	
	
-> What is the output of this code?

public class Test {
    public static void main(String[] args) {
        System.out.println(10 + 20 + "30");   
        System.out.println("30" + 10 + 20);
    }
}

Output:
3030
301020

Explanation:

    10 + 20 + "30": The integers are added first (30), then concatenated with the string "30".
    "30" + 10 + 20: The string "30" causes concatenation for all subsequent values.
	
	
-> Can a constructor be synchronized in Java?

No, constructors cannot be synchronized because:

    Thread Safety: Synchronization is not required since no other thread can access the object being constructed until the constructor finishes.
    Compile-Time Error: Declaring a constructor as synchronized causes a compilation error.
	
	
-> Can we have an abstract class without any abstract methods?

Yes, an abstract class can exist without abstract methods. It is used to provide a common base class for subclasses and prevent direct instantiation.

Example:

abstract class Base {
    void display() {
        System.out.println("Non-abstract method in abstract class.");
    }
}

class Derived extends Base {}

public class Test {
    public static void main(String[] args) {
        Base obj = new Derived();
        obj.display();
    }
}


-> Can we make an abstract class final?

No, an abstract class cannot be declared final because final prevents inheritance, and the purpose of an abstract class is to be extended.


-> Can we declare an interface method as final?

No, all methods in an interface are implicitly abstract and public, so they cannot be final.


-> Can a class be both final and abstract?

No, a class cannot be both final and abstract because:

    A final class cannot be extended.
    An abstract class is meant to be extended.
	
	
-> Can we assign null to an int variable?

No, null can only be assigned to object references. Assigning null to a primitive type like int will result in a compile-time error.

public class Test {
    public static void main(String[] args) {
        Integer num = null; // Allowed (wrapper class)
        int x = null; // Compilation error
    }
}


-> What happens if you serialize an object with a transient variable?

    Transient variables are not serialized.
    Their value will be null (for objects) or default values (0, false, etc.) after deserialization.


import java.io.*;

class Test implements Serializable {
    @Serial
    private static final long serialVersionUID = 1L;
    int id;
    transient String name;

    public Test(int id, String name) {
        this.id = id;
        this.name = name;
    }
}

public class SerializationTest {
    public static void main(String[] args) throws Exception {
        Test obj = new Test(1, "John");

        // Serialize
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("test.ser"))) {
            oos.writeObject(obj);
        }

        // Deserialize
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("test.ser"))) {
            Test deserialized = (Test) ois.readObject();
            System.out.println("ID: " + deserialized.id);
            System.out.println("Name: " + deserialized.name); // null because it was transient
        }
    }
}

Output:
ID: 1
Name: null


-> Double Brace Initialization in Java

Double Brace Initialization is a Java idiom used for initializing collections or other objects in a concise way. It involves two sets of braces:

    The first brace creates an anonymous inner class.
    The second brace is an initializer block inside that class.

How It Works

    The first set of braces instantiates the object and creates an anonymous subclass.
    The second set of braces is an instance initializer block that allows adding elements or executing initialization logic.
	
Example: Using Double Brace Initialization for a List

import java.util.ArrayList;
import java.util.List;

public class DoubleBraceExample {
    public static void main(String[] args) {
        List<String> names = new ArrayList<>() {{
            add("Alice");
            add("Bob");
            add("Charlie");
        }};

        System.out.println(names);
    }
}

Example: Using Double Brace Initialization for a Map

import java.util.HashMap;
import java.util.Map;

public class DoubleBraceExample {
    public static void main(String[] args) {
        Map<Integer, String> idToName = new HashMap<>() {{
            put(1, "Alice");
            put(2, "Bob");
            put(3, "Charlie");
        }};

        System.out.println(idToName);
    }
}

Pros of Double Brace Initialization

    Conciseness:
        Reduces boilerplate code for initializing collections or objects.
    Convenient for Testing:
        Useful when quickly populating data for testing or prototyping.
		
Cons of Double Brace Initialization

    Creation of Anonymous Class:
        Every time you use double brace initialization, an anonymous subclass is created. This increases memory usage and can lead to memory leaks if the object holds references to enclosing classes.

    Reduced Clarity:
        The use of anonymous classes and instance initializer blocks can make the code less readable for others.

    Serialization Issues:
        Anonymous inner classes are not static and cannot be serialized reliably because they hold an implicit reference to the outer class.
		
Best Practice

Avoid using double brace initialization in production code due to its potential downsides. Instead, use standard initialization techniques or utility methods like List.of() (introduced in Java 9):

import java.util.List;

public class ImprovedExample {
    public static void main(String[] args) {
        List<String> names = List.of("Alice", "Bob", "Charlie");
        System.out.println(names);
    }
}

Summary

Double brace initialization is a quick and concise way to initialize collections and objects, but it introduces performance and maintainability risks. Use it cautiously and prefer modern alternatives when available.


-> What is the difference between Class.forName() and ClassLoader.loadClass()?

    Class.forName():
        Loads a class and initializes it (executes static blocks or static fields).
        It uses the current class loader.

    ClassLoader.loadClass():
        Loads a class without initializing it (lazy initialization).
        Initialization occurs only when explicitly requested (e.g., Class.newInstance()).
		
		
public class Test {
    static {
        System.out.println("Static block executed!");
    }

    public static void main(String[] args) throws Exception {
        Class.forName("Test"); // Executes the static block
        ClassLoader.getSystemClassLoader().loadClass("Test"); // Does not execute the static block
    }
}


-> What is the output of this code?

import java.util.HashSet;
import java.util.Set;

public class Test {
    public static void main(String[] args) {
        Set set = new HashSet<>();
        set.add("1");
        set.add(1);

        System.out.println(set);  // [1, 1]
    }
}

Explanation:

    The HashSet uses hashCode() and equals() to determine uniqueness.
    "1" (String) and 1 (Integer) are different objects with different hashCode values.
	
	
-> What is the output of this code?

public class Test {
    public static void main(String[] args) {
        String s1 = new String("Test");
        String s2 = new String("Test");

        System.out.println(s1 == s2);       // false
        System.out.println(s1.intern() == s2.intern()); // true
    }
}

Explanation:

    Line 1: s1 and s2 are two different objects in heap memory.
    Line 2: intern() returns the string from the string pool, which is the same for both s1 and s2.
	
	
-> What is the output of this code?

public class Test {
    public static void main(String[] args) {
        int i = 0;
        for (System.out.println("Start"); i < 1; i++) {
            System.out.println("Inside loop");
        }
    }
}

Output:
Start
Inside loop

Explanation:

    System.out.println("Start") is executed as part of the initialization block of the for loop before the condition is checked.
	
	
-> Can a try block exist without a catch block?

public class Test {
    public static void main(String[] args) {
        try {
            System.out.println("Inside try block");
        } finally {
            System.out.println("Inside finally block");
        }
    }
}

Output:
Inside try block
Inside finally block


-> Can you make an enum extend a class?

No, enums cannot extend a class because they implicitly extend java.lang.Enum. However, they can implement interfaces.

public enum Days implements Runnable {
    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY;

    @Override
    public void run() {
        System.out.println("Running on " + this);
    }

    // Main method
    public static void main(String[] args) {
        Days.MONDAY.run();
        Days.TUESDAY.run();
        Days.WEDNESDAY.run();
        Days.THURSDAY.run();
        Days.FRIDAY.run();
        Days.SATURDAY.run();
        Days.SUNDAY.run();
    }
}

Output:
Running on MONDAY
Running on TUESDAY
Running on WEDNESDAY
Running on THURSDAY
Running on FRIDAY
Running on SATURDAY
Running on SUNDAY


-> Generics

Generics provide type safety and eliminate the need for casting by allowing you to specify the type of objects that a class or method can work with.

Example: Generic Class

class Box<T> {
    private T item;

    public void setItem(T item) {
        this.item = item;
    }

    public T getItem() {
        return item;
    }
}

public class GenericsExample {
    public static void main(String[] args) {
        Box<String> stringBox = new Box<>();
        stringBox.setItem("Hello Generics");
        System.out.println(stringBox.getItem());

        Box<Integer> intBox = new Box<>();
        intBox.setItem(42);
        System.out.println(intBox.getItem());
    }
}

Output:
Hello Generics
42


Advanced Use: Generic Methods

public class GenericMethodExample {
    public static <T> void printArray(T[] array) {
        for (T element : array) {
            System.out.println(element);
        }
    }

    public static void main(String[] args) {
        String[] strings = {"Java", "Generics"};
        Integer[] integers = {1, 2, 3};

        printArray(strings);
        printArray(integers);
    }
}

Output:
Java
Generics
1
2
3


-> Stream API example

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class StreamExample {
    public static void main(String[] args) {
        List<String> names = Arrays.asList("Alice", "Bob", "Charlie", "David");

        // Filter names starting with 'A' and collect them into a list
        List<String> filteredNames = names.stream()
                                          .filter(name -> name.startsWith("A"))
                                          .collect(Collectors.toList());
        System.out.println(filteredNames);

        // Convert names to uppercase
        names.stream()
             .map(String::toUpperCase)
             .forEach(System.out::println);
    }
}

Output:
[Alice]
ALICE
BOB
CHARLIE
DAVID


-> Concurrency (Executor Framework)

The Executor Framework simplifies multithreaded programming by managing thread pools.

Example: Using Executors

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class ExecutorExample {
    public static void main(String[] args) {
        ExecutorService executor = Executors.newFixedThreadPool(2);

        // Submit tasks to the executor
        for (int i = 1; i <= 5; i++) {
            int taskId = i;
            executor.submit(() -> {
                System.out.println("Task " + taskId + " is running on thread " + Thread.currentThread().getName());
            });
        }

        executor.shutdown();
    }
}

Task 1 is running on thread pool-1-thread-1
Task 2 is running on thread pool-1-thread-2
Task 4 is running on thread pool-1-thread-2
Task 3 is running on thread pool-1-thread-1
Task 5 is running on thread pool-1-thread-2


-> Optional

The Optional class, introduced in Java 8, is used to handle null values safely.

Example: Avoiding NullPointerException

import java.util.Optional;

public class OptionalExample {
    public static void main(String[] args) {
        Optional<String> optionalName = Optional.ofNullable(getName());
        
        // Use isPresent() or ifPresent() to avoid null checks
        optionalName.ifPresent(name -> System.out.println("Hello, " + name));

        // Use orElse to provide a default value
        String name = optionalName.orElse("Guest");
        System.out.println("Welcome, " + name);
    }

    private static String getName() {
        // Simulating a nullable value
        return null;
    }
}

Output:
Welcome, Guest


-> Serialization and Deserialization

Serialization is the process of converting an object into a byte stream, while deserialization converts the byte stream back into an object.

Example: Serializable Class

import java.io.*;

class Person implements Serializable {
    private static final long serialVersionUID = 1L;
    private String name;
    private int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    @Override
    public String toString() {
        return "Person{name='" + name + "', age=" + age + '}';
    }
}

public class SerializationExample {
    public static void main(String[] args) throws Exception {
        Person person = new Person("Alice", 25);

        // Serialize the object
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("person.ser"))) {
            oos.writeObject(person);
        }

        // Deserialize the object
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("person.ser"))) {
            Person deserializedPerson = (Person) ois.readObject();
            System.out.println("Deserialized Person: " + deserializedPerson);
        }
    }
}

Output:
Deserialized Person: Person{name='Alice', age=25}


-> Custom Annotations

Annotations provide metadata about the code and can be processed at runtime or compile-time.

Example: Creating and Using Custom Annotations

import java.lang.annotation.*;
import java.lang.reflect.Method;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
@interface Info {
    String author();
    String date();
}

class Test {
    @Info(author = "John Doe", date = "2024-11-23")
    public void myMethod() {
        System.out.println("My annotated method!");
    }
}

public class AnnotationExample {
    public static void main(String[] args) throws Exception {
        Method method = Test.class.getMethod("myMethod");
        Info info = method.getAnnotation(Info.class);

        System.out.println("Author: " + info.author());
        System.out.println("Date: " + info.date());
    }
}

Output:
Author: John Doe
Date: 2024-11-23
















	
	
	







