->
public class DivisionCalculator {

    public static void divide(int a, int b) throws ArithmeticException {  // //throws ArithmeticException is redundant, remove it
        if (b == 0) {
            throw new ArithmeticException("Division by zero is not allowed");
        }
        int result = a / b;
        System.out.println("Result: " + result);
    }

    public static void main(String[] args) {
        try {
            divide(10, 2); // Expected output: Result: 5
            divide(10, 0); // This will throw an exception
        } catch (ArithmeticException e) {
            System.out.println("Exception caught: " + e.getMessage());
        }
    }
}

Output:
Result: 5
Exception caught: Division by zero is not allowed


"throws ArithmeticException" in the above program is redundant. In Java, unchecked exceptions (subclasses of RuntimeException, such as ArithmeticException) do not need to be declared in a throws clause. Declaring them is optional and can make the code unnecessarily verbose.


Hereâ€™s the comparison between throw and try-catch

Purpose:

    The throw keyword is used to explicitly throw an exception. It signals an error condition in the program.
    The try-catch block is used to catch and handle exceptions that occur during the program execution.

When to Use:

    Use throw when you want to indicate an error condition that needs to be handled by the calling code or a higher level in the program.
    Use try-catch when you want to deal with potential errors gracefully without terminating the program.

Control Flow:

    The throw keyword interrupts the current method execution and propagates the exception to the caller or a suitable try-catch block.
    The try-catch block prevents the program from crashing by catching the exception and allowing the program to continue execution.

Example Usage:

    Common scenarios for throw include validating inputs or throwing custom exceptions to indicate specific errors.
    Common scenarios for try-catch include handling exceptions that may occur during file I/O operations, network communication, or other risky operations.

Code Placement:

    The throw keyword is typically used inside a method or block of code where the error occurs.
    The try-catch block surrounds the code that might throw exceptions to handle them appropriately.
	
______________________________________________________________________________________________________
-> In Java, exceptions are categorized into checked and unchecked exceptions.

Checked Exceptions

    Definition:
        These are exceptions that are checked at compile-time.
        The compiler forces the programmer to either handle them using a try-catch block or declare them in the method signature with throws.

    Examples:
        IOException
        SQLException
        FileNotFoundException

    Purpose:
        Used for conditions that are expected to occur during the program's execution and can be recovered from (e.g., file not found, database connection issues).

    Handling Requirement:
        Must either be caught using a try-catch block or declared in the throws clause of the method.
        Failing to handle or declare them results in a compile-time error.
		
Unchecked Exceptions

    Definition:
        These are exceptions that are not checked at compile-time but are instead checked at runtime.
        They are subclasses of RuntimeException.

    Examples:
        NullPointerException
        ArrayIndexOutOfBoundsException
        ArithmeticException

    Purpose:
        Used for programming errors or bugs that can be avoided with proper code (e.g., accessing a null reference, dividing by zero).

    Handling Requirement:
        No need to declare them in the throws clause or catch them explicitly.
        It's the programmer's responsibility to avoid these exceptions by writing robust code.
		
		
When to Use Checked vs. Unchecked Exceptions

    Checked Exceptions:
        Use for situations where the caller can reasonably be expected to recover, such as missing files or database connectivity issues.
    Unchecked Exceptions:
        Use for programming logic errors (e.g., invalid array index, null references) that can be avoided with better coding practices.
______________________________________________________________________________________________________
