-> demonstrates reading values from a List

import java.util.ArrayList;
import java.util.List;

public class ListIterationExample {

    public static void main(String[] args) {
        List<String> fruits = new ArrayList<>();
        fruits.add("Apple");
        fruits.add("Banana");
        fruits.add("Mango");

        // Iterating using traditional for loop
        System.out.println("Iterating using for loop");
        for (int i = 0; i < fruits.size(); i++) {
            System.out.println(fruits.get(i));
        }

        // Iterating using enhanced for loop
        for(String fruit : fruits) {
            System.out.println(fruit);
        }

        // Iterating using forEach method
        System.out.println("Iterating using forEach method");
        fruits.forEach(fruit -> System.out.println(fruit));

        // Iterating using forEach method with method reference
        System.out.println("Iterating using forEach method with method reference");
        fruits.forEach(System.out::println);
    }
}
_________________________________________________________________________________
-> create a Map and iterate through its keys and values using different methods.

import java.util.HashMap;
import java.util.Map;

public class MapIterationExample {
    public static void main(String[] args) {
        // Create and initialize a Map
        Map<Integer, String> fruitsMap = new HashMap<>();
        fruitsMap.put(1, "Apple");
        fruitsMap.put(2, "Banana");
        fruitsMap.put(3, "Cherry");
        fruitsMap.put(4, "Date");

        System.out.println("Iterating through values using for-each and values():");
        // Method 1: Iterating through values directly
        for (String value : fruitsMap.values()) {
            System.out.println("Value: " + value);
        }
		
		// Iterate through the keys of the map and print each key
		for (Integer key : fruitsMap.keySet()) {
           System.out.println("Key: " + key);
        }

        System.out.println("\nIterating through entries and accessing values:");
        // Method 2: Iterating through entrySet and accessing values
        for (Map.Entry<Integer, String> entry : fruitsMap.entrySet()) {
            System.out.println("Key: " + entry.getKey() + ", Value: " + entry.getValue());
        }

        System.out.println("\nIterating through keys and accessing values:");
        // Method 3: Iterating through keys and accessing values
        for (Integer key : fruitsMap.keySet()) {
            System.out.println("Key: " + key + ", Value: " + fruitsMap.get(key));
        }

        System.out.println("\nIterating through keys and values using forEach method:");
        // Method 4: Iterating through keys and values using forEach method
        fruitsMap.forEach((key, value) -> System.out.println("Key: " + key + ", Value: " + value));

        System.out.println("\nIterating through keys and values using forEach method with lambda expression:");
        // Method 5: Iterating through keys and values using forEach method with lambda expression
        fruitsMap.forEach((key, value) -> System.out.println("Key: " + key + ", Value: " + value));

        System.out.println("\nIterating through keys using forEach method with method reference:");
        // Method 6: Iterating through keys using forEach method with method reference
        fruitsMap.keySet().forEach(System.out::println);

        System.out.println("\nIterating through values using forEach method with method reference:");
        // Method 7: Iterating through values using forEach method with method reference
        fruitsMap.values().forEach(System.out::println);

        System.out.println("\nIterating through entries using forEach method with method reference:");
        // Method 8: Iterating through entries using forEach method with method reference
        fruitsMap.entrySet().forEach(System.out::println);


    }
}
_________________________________________________________________________________

-> Traditional for loop, reading values from an array

public class ForLoopExample {
    public static void main(String[] args) {
        int[] numbers = {1, 2, 3, 4, 5};

        // Traditional for loop
        for (int i = 0; i < numbers.length; i++) {
            System.out.println("Element at index " + i + ": " + numbers[i]);
        }
    }
}
---------------------------------------------------------------------------------

-> Enhanced for Loop


public class EnhancedForLoopExample {
    public static void main(String[] args) {
        int[] numbers = {1, 2, 3, 4, 5};

        // Enhanced for loop (for-each loop)
        for (int num : numbers) {
            System.out.println("Element: " + num);
        }
    }
}
---------------------------------------------------------------------------------
-> Using forEach by converting array to stream

import java.util.Arrays;

public class ForEachExample {
    public static void main(String[] args) {
        int[] numbers = {1, 2, 3, 4, 5};

        // Using forEach by converting array to stream
        Arrays.stream(numbers)
              .forEach(num -> System.out.println("Element: " + num));
    }
}


forEach method is part of the Iterable interface, which is available in collections like List, Set, etc. However, arrays do not directly support the forEach method, but you can convert an array to a stream using the Arrays.stream() method to use forEach with arrays.


https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/stream/IntStream.html#forEach(java.util.function.IntConsumer)
https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Iterable.html#forEach(java.util.function.Consumer)

---------------------------------------------------------------------------------

-> forEach method is part of the IntStream class when working with primitive int arrays, and other primitive streams like DoubleStream or LongStream.

In the case of IntStream, it is a specialized stream for handling primitive int values, and it allows methods like forEach to be used directly on an array of primitive int values.

Here's a quick breakdown:

    IntStream: A stream that deals with primitive int values.
    forEach: A terminal operation available in streams, including IntStream, that processes each element of the stream.


import java.util.stream.IntStream;

public class ForEachWithIntStreamExample {
    public static void main(String[] args) {
        int[] numbers = {1, 2, 3, 4, 5};

        // Using IntStream and forEach
        IntStream.of(numbers)
                 .forEach(num -> System.out.println("Element: " + num));				 
		
		// IntStream.of(1,2,3,4,5).forEach(System.out::println);
    }
}

_________________________________________________________________________________