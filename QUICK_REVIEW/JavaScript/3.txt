-> The Array.find and Array.some methods in TypeScript serve different purposes:

    Array.find: Returns the first element in the array that satisfies the provided testing function. If no elements match, it returns undefined.

    Array.some: Tests whether at least one element in the array passes the provided testing function. It returns a boolean (true or false).

Key Differences

    Return Value:
        find: Returns the element itself (or undefined if no match is found).
        some: Returns true if a match is found, otherwise false.
    Use Case:
        Use find when you need the actual matching element.
        Use some when you just need to check for the presence of a match.
		

Example 1: Searching for a User

Use Case: Find a user object by email.


interface User {
  id: number;
  name: string;
  email: string;
}

const users: User[] = [
  { id: 1, name: 'Alice', email: 'alice@example.com' },
  { id: 2, name: 'Bob', email: 'bob@example.com' },
  { id: 3, name: 'Charlie', email: 'charlie@example.com' },
];

// Using find
const user = users.find((user) => user.email === 'bob@example.com');
console.log(user); // { id: 2, name: "Bob", email: "bob@example.com" }

// Using some
const exists = users.some((user) => user.email === 'bob@example.com');
console.log(exists); // true


Example 2: Checking Product Availability

Use Case: Check if at least one product is in stock.

interface Product {
  id: number;
  name: string;
  inStock: boolean;
}

const products: Product[] = [
  { id: 101, name: 'Laptop', inStock: false },
  { id: 102, name: 'Phone', inStock: true },
  { id: 103, name: 'Tablet', inStock: false },
];

// Using some
const hasStock = products.some((product) => product.inStock);
console.log(hasStock); // true

// Using find
const firstAvailableProduct = products.find((product) => product.inStock);
console.log(firstAvailableProduct); // { id: 102, name: "Phone", inStock: true }


Example 3: Validating Inputs

Use Case: Validate if any input field is empty.

const inputs = ['John', 'Doe', 'john.doe@example.com', ''];

// Using some
const hasEmptyField = inputs.some((input) => input.trim() === '');
console.log(hasEmptyField); // true


Example 4: Finding the Earliest Deadline

Use Case: Retrieve the task with the closest deadline.

interface Task {
  id: number;
  name: string;
  deadline: Date;
}

const tasks: Task[] = [
  { id: 1, name: 'Task A', deadline: new Date('2025-01-10') },
  { id: 2, name: 'Task B', deadline: new Date('2025-01-05') },
  { id: 3, name: 'Task C', deadline: new Date('2025-01-15') },
];

// Using find (after sorting by deadline)
const earliestTask = tasks
  .sort((a, b) => a.deadline.getTime() - b.deadline.getTime())
  .find(() => true);
console.log(earliestTask); // { id: 2, name: 'Task B', deadline: 2025-01-05T00:00:00.000Z }


Here is the summary:

    Scenario: Get the matching object
        Use find: ✅
        Use some: ❌

    Scenario: Check if at least one matches
        Use find: ❌
        Use some: ✅

    Scenario: Retrieve the first element after sorting
        Use find: ✅
        Use some: ❌
___________________________________________________________________________

-> 
// Typescript example to find a task with closest deadline. the task object should have id, name, deadline, and priority.
// the function should return the task object with the closest deadline.
// if two tasks have the same deadline, the task with the higher priority should be returned.
// if two tasks have the same deadline and priority, return the first task.
// if the task list is empty, return null.

interface Task {
  id: number;
  name: string;
  deadline: Date;
  priority: number;
}

function findClosestDeadlineTask(tasks: Task[]): Task | null {
  if (tasks.length === 0) {
    return null;
  }

  let closestTask = tasks[0];
  for (let i = 1; i < tasks.length; i++) {
    const task = tasks[i];
    if (task.deadline < closestTask.deadline) {
      closestTask = task;
    } else if (task.deadline === closestTask.deadline) {
      if (task.priority > closestTask.priority) {
        closestTask = task;
      }
    }
  }

  return closestTask;
}

// test
const tasks: Task[] = [
  {
    id: 1,
    name: 'task1',
    deadline: new Date('2021-06-01'),
    priority: 1,
  },
  {
    id: 2,
    name: 'task2',
    deadline: new Date('2021-06-02'),
    priority: 2,
  },
  {
    id: 3,
    name: 'task3',
    deadline: new Date('2021-06-02'),
    priority: 1,
  },
  {
    id: 4,
    name: 'task4',
    deadline: new Date('2021-06-03'),
    priority: 3,
  },
];

console.log(findClosestDeadlineTask(tasks)); // { id: 2, name: 'task2', deadline: 2021-06-02T00:00:00.000Z, priority: 2 }

// test with empty list
console.log(findClosestDeadlineTask([])); // null

// test with one task
console.log(
  findClosestDeadlineTask([
    {
      id: 1,
      name: 'task1',
      deadline: new Date('2021-06-01'),
      priority: 1,
    },
  ])
); // { id: 1, name: 'task1', deadline: 2021-06-01T00:00:00.000Z, priority: 1 }

// test with two tasks with the same deadline
console.log(
  findClosestDeadlineTask([
    {
      id: 1,
      name: 'task1',
      deadline: new Date('2021-06-01'),
      priority: 1,
    },
    {
      id: 2,
      name: 'task2',
      deadline: new Date('2021-06-01'),
      priority: 2,
    },
  ])
); // { id: 2, name: 'task2', deadline: 2021-06-01T00:00:00.000Z, priority: 2 }

// test with two tasks with the same deadline and priority
console.log(
  findClosestDeadlineTask([
    {
      id: 1,
      name: 'task1',
      deadline: new Date('2021-06-01'),
      priority: 1,
    },
    {
      id: 2,
      name: 'task2',
      deadline: new Date('2021-06-01'),
      priority: 1,
    },
  ])
); // { id: 1, name: 'task1', deadline: 2021-06-01T00:00:00.000Z, priority: 1 }


-------------------------------------------------------------------------------


for (let i = 1; i < tasks.length; i++) {
    const task = tasks[i];
    if (task.deadline < closestTask.deadline) {
      closestTask = task;
    } else if (task.deadline === closestTask.deadline) {
      if (task.priority > closestTask.priority) {
        closestTask = task;
      }
    }
  }
  
 // above for loop can be replaced with enhanced for loop 
 for (const task of tasks) {
    if (task.deadline < closestTask.deadline) {
      closestTask = task;
    } else if (task.deadline === closestTask.deadline) {
      if (task.priority > closestTask.priority) {
        closestTask = task;
      }
    }
  }
___________________________________________________________________________



