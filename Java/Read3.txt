https://www.educative.io/edpresso/what-is-dynamic-method-dispatch-in-java

public class Apple 
{ 
    void display() 
    { 
        System.out.println("Inside Apple's display method"); 
    } 
} 

public class Banana extends Apple 
{ 
    void display()   // overriding display()
    { 
        System.out.println("Inside Banana's display method"); 
    } 
}

public class Cherry extends Apple 
{ 
    void display()   // overriding display()
    { 
        System.out.println("Inside Cherry's display method"); 
    } 
} 

public class Fruits_Dispatch 
{ 
    public static void main(String args[]) 
    {  
        Apple a  = new Apple();   // object of Apple
        Banana b = new Banana();  // object of Banana
        Cherry c = new Cherry();  // object of Cherry 
  
        Apple ref;    // taking a reference of Apple
           
        ref = a;   // r refers to a object in Apple
        ref.display();   // calling Apple's version of display()
        
        ref = b;   // r refers to a object in Banana
        ref.display();   // calling Banana's version of display()
  
        ref = c;  // r refers to a object in Cherry
        ref.display();  // calling Cherry's version of display()
    } 
} 


// The above code in main method in short form is as below.
Apple a = new Apple();
a.display();
		
Apple b = new Banana();
b.display();
		
Apple c = new Cherry();
c.display();

__________________________________________________________________________
https://www.programiz.com/java-programming/examples/swap-two-numbers

// using temporary variable
public class SwapNumbers {

    public static void main(String[] args) {

        float first = 1.20f, second = 2.45f;

        System.out.println("--Before swap--");
        System.out.println("First number = " + first);
        System.out.println("Second number = " + second);

        // Value of first is assigned to temporary
        float temporary = first;

        // Value of second is assigned to first
        first = second;

        // Value of temporary (which contains the initial value of first) is assigned to second
        second = temporary;

        System.out.println("--After swap--");
        System.out.println("First number = " + first);
        System.out.println("Second number = " + second);
    }
}
--------------------------------------------------------------------------

// without temporary variable
public class SwapNumbers {

    public static void main(String[] args) {

        float first = 12.0f, second = 24.5f;

        System.out.println("--Before swap--");
        System.out.println("First number = " + first);
        System.out.println("Second number = " + second);

        first = first - second;
        second = first + second;
        first = second - first;

        System.out.println("--After swap--");
        System.out.println("First number = " + first);
        System.out.println("Second number = " + second);
    }
}



__________________________________________________________________________

https://www.programiz.com/java-programming/examples/multiplication-table

// Generate Multiplication Table using for loop.
public class MultiplicationTable {

    public static void main(String[] args) {

        int num = 5;
        for(int i = 1; i <= 10; ++i)
        {
            System.out.printf("%d * %d = %d \n", num, i, num * i);
        }
    }
}
--------------------------------------------------------------------------
//Multiplication Table using while loop
//unlike a for loop, we have to increment the value of i inside the body of the loop.
//Though both programs are technically correct, it is better to use for loop in this case. It's because the number of iterations (from 1 to 10) is known.
public class MultiplicationTable {

    public static void main(String[] args) {

        int num = 9, i = 1;
        while(i <= 10)
        {
            System.out.printf("%d * %d = %d \n", num, i, num * i);
            i++;
        }
    }
}
__________________________________________________________________________
https://www.youtube.com/watch?v=-5NC5_sI-vQ (Java is ALWAYS Pass By Value. Here's Why)
public class Cheese {

	private int levelOfStinkiness;

	public int getLevelOfStinkiness() {
		return levelOfStinkiness;
	}

	public void setLevelOfStinkiness(int levelOfStinkiness) {
		this.levelOfStinkiness = levelOfStinkiness;
	}
	
	
}


public class PassByValueOrReference {

	public static void main(String[] args) {
		
		Cheese myCheese = new Cheese();
		myCheese.setLevelOfStinkiness(10);
		
		increaseStinkiness(myCheese);
		
		System.out.println(myCheese.getLevelOfStinkiness());

	}
	
	/*
	 * private static void increaseStinkiness(Cheese cheese) {
	 * cheese.setLevelOfStinkiness(cheese.getLevelOfStinkiness() + 1); }
	 */
	private static void increaseStinkiness(Cheese cheese) {
		cheese = new Cheese();
		cheese.setLevelOfStinkiness(756);		
	}

}

--------------------------------------------------------------------------
--------------------------------------------------------------------------
__________________________________________________________________________

__________________________________________________________________________

__________________________________________________________________________
--------------------------------------------------------------------------