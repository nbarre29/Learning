https://docs.oracle.com/javase/tutorial/essential/regex/test_harness.html

package demo;

import java.io.Console;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class RegexTestHarness {

    public static void main(String[] args){
        Console console = System.console();
        if (console == null) {
            System.err.println("No console.");
            System.exit(1);
        }
        while (true) {

            Pattern pattern = 
            Pattern.compile(console.readLine("%nEnter your regex: "));

            Matcher matcher = 
            pattern.matcher(console.readLine("Enter input string to search: "));

            boolean found = false;
            while (matcher.find()) {
                console.format("I found the text" +
                    " \"%s\" starting at " +
                    "index %d and ending at index %d.%n",
                    matcher.group(),
                    matcher.start(),
                    matcher.end());
                found = true;
            }
            if(!found){
                console.format("No match found.%n");
            }
        }
    }
}


C:\Naveen\Eclipse\workspaces\ws1\samples\src>javac demo\RegexTestHarness.java

C:\Naveen\Eclipse\workspaces\ws1\samples\src>java demo.RegexTestHarness

Enter your regex: abc
Enter input string to search: abc
I found the text "abc" starting at index 0 and ending at index 3.
__________________________________________________________________________

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Test {

    public static void main(String[] args) {
    	
        while (true) {

            Pattern pattern = 
            Pattern.compile(("a*b"));

            Matcher matcher = 
            pattern.matcher("aaaaaaaaaaaaaaab");

            boolean found = false;
            while (matcher.find()) {
            	System.out.printf("I found the text" +
                        " \"%s\" starting at " +
                        "index %d and ending at index %d.%n",
                        matcher.group(),
                        matcher.start(),
                        matcher.end());
                
                found = true;
            }
            if(!found){
            	System.out.printf("No match found.%n");
            }
        }
    }
}
--------------------------------------------------------------------------
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Test {

    public static void main(String[] args) {  	
        
            Pattern pattern = 
            Pattern.compile(("a*b"));

            Matcher matcher = 
            pattern.matcher("aaaaaaaaaaaaaaab");

            boolean found = false;
            while (matcher.find()) {
            	System.out.printf("I found the text \"%s\" starting at index %d and ending at index %d.%n",
                        matcher.group(),
                        matcher.start(),
                        matcher.end());
                
                found = true;
            }
            if(!found){
            	System.out.printf("No match found.%n");
            }
        
    }
}
__________________________________________________________________________
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Test {

    public static void main(String[] args) {
		
		  Pattern pattern = Pattern.compile("a*b"); 
		  Matcher matcher =  pattern.matcher("aaaaab"); 
		  System.out.println(matcher.matches());
		  
		  // Above 3 lines of code in a single line
		  System.out.println(Pattern.compile("a*b").matcher("aaaaab").matches());		 
    	
		  // Another way
    	  System.out.println(Pattern.matches("a*b", "aaaaab")); 
    	
    }
}
__________________________________________________________________________
import java.util.regex.*; 

public class Test {

	public static void main(String[] args) {	  
		
		  
		System.out.println(Pattern.matches("\\d", "abc"));//false (non-digit)  
		System.out.println(Pattern.matches("\\d", "1"));//true (digit and comes once)  
		System.out.println(Pattern.matches("\\d", "4443"));//false (digit but comes more than once)  
		System.out.println(Pattern.matches("\\d\\d\\d\\d", "4443"));  //true
		System.out.println(Pattern.matches("\\d\\d", "45")); //true
		System.out.println(Pattern.matches("\\d*", "4443")); //true
		System.out.println(Pattern.matches("\\d+", "4443")); //true
		System.out.println(Pattern.matches("\\d?", ""));  //true
		System.out.println(Pattern.matches("\\d?", "4"));  //true
		System.out.println(Pattern.matches("\\d*", ""));  //true
		System.out.println(Pattern.matches("\\d*", "4"));  //true
		System.out.println(Pattern.matches("\\d+", ""));  //false
		System.out.println(Pattern.matches("\\d+", "4"));  //true		
		System.out.println(Pattern.matches("\\d", "323abc"));//false (digit and char)  		
		System.out.println(Pattern.matches("\\d{2,3}+", "246"));  //true  (at least 2 but not more than 3 times)
		System.out.println(Pattern.matches("\\d{2,3}+", "2468"));  //false  (at least 2 but not more than 3 times)
		  
		System.out.println(Pattern.matches("\\D", "abc"));//false (non-digit but comes more than once)  
		System.out.println(Pattern.matches("\\D", "1"));//false (digit)  
		System.out.println(Pattern.matches("\\D", "4443"));//false (digit)  
		System.out.println(Pattern.matches("\\D", "323abc"));//false (digit and char)  
		System.out.println(Pattern.matches("\\D", "m"));//true (non-digit and comes once)  		  
		
		System.out.println(Pattern.matches("\\D*", "mak"));//true (non-digit and may come 0 or more times)  

	}

}
__________________________________________________________________________
https://docs.oracle.com/javase/tutorial/essential/regex/literals.html

There are two ways to force a metacharacter to be treated as an ordinary character:
precede the metacharacter with a backslash, or
enclose it within \Q (which starts the quote) and \E (which ends it).

import java.util.regex.Pattern;

public class RegexTest {

	public static void main(String[] args) {
	   final String REGEX ="cat\\Q.\\E";
	   System.out.println(Pattern.matches(REGEX, "cat."));   //true

	}

}
__________________________________________________________________________
https://www.freeformatter.com/java-regex-tester.html
__________________________________________________________________________

https://howtodoinjava.com/java-regular-expression-tutorials/

import java.util.regex.Matcher;
import java.util.regex.Pattern;
 
public class Main 
{
 public static void main(String[] args) 
 {
  Pattern pattern = Pattern.compile("Alex|Brian");
  Matcher matcher = pattern.matcher("Generally, Alex and Brian share a great bonding.");
   
  while (matcher.find()) {
            System.out.print("Start index: " + matcher.start());
            System.out.print(" End index: " + matcher.end() + " ");
            System.out.println(" - " + matcher.group());
        }
 }
}

Output:
Start index: 11 End index: 15  - Alex
Start index: 20 End index: 25  - Brian

->Pipe symbol '|' allows you to combine multiple expressions into a single expression that matches any of the individual ones.

For example, "Alex" and "Brian" are separate expressions, but "Alex|Brian" is one expression that matches either of both.

Similar to dot, pipe is not metacharacter when it is used within character class. Within character class, it is a simple character only.

For example, to match the words "First" or "1st", we can write regex – "(First|1st)" or in shorthand "(Fir|1)st".



->Matching Any Character with Dot
The metacharacter ' . ' is a shorthand for a character class that matches any character. Note that dots are not metacharacters when they are used within character classes. Within character class, it is a simple character only.

For example, 06.24.2019 will match 06/24/2019 or 06-24-2019 or 06.24.2019. But
06[.]24[.]2019 will match only 06.24.2019.

-> Negated character classes
If we use negation sign ( ^ ) in a character class then the class matches any character that isn't listed. e.g. [^1-6] matches a character that's not 1 through 6.

->Range of characters
A dash " - " indicates a range of characters. [hH][1-6] is similar to [hH][123456]. Other useful character ranges are [0-9] and [a-z] which match digits and English lowercase letters.

We can specify multiple ranges in single construct e.g. [0123456789abcdefABCDEF] can be written as [0-9a-fA-F]. Note that order in which ranges are given doesn't matter.

Note that a dash is a metacharacter only within a character class, otherwise it matches the normal dash character. Also, if it is the first character listed in the range, it can't possibly indicate a range, so it will not be meta character in this case.

->Character Classes
The regular-expression construct "[···]", usually called a character class, lets us list the characters we want to allow at that point in the match. Character classes are useful in creating spell-checkers.

For example, while "e" matches just an e, and "a" matches just an a, the regular expression [ea] matches either. e.g. sep[ea]r[ea]te will match all the words "seperate" "separate" and "separete".

Another example can be to allow capitalization of a word's first letter e.g. [Ss]mith will allow the words smith and Smith both.

Similarly, <[hH][123456]> will match all heading tags i.e. H1, H2, H3, H4, H5 and H6.

->Start and End of the Line
The start and end are represented with '^' (caret) and '$' (dollar) signs. The caret and dollar are special in that they match a position in the line rather than any actual text characters themselves.

For example, the regular expression "cat" finds 'cat' anywhere in the string, but "^cat" matches only if the 'cat' is at the beginning of the line. e.g. words like 'category' or 'catalogue'.

Similarly, "cat$" matches only if the 'cat' is at the end of the line. e.g. words like 'scat' , 'concat'.
__________________________________________________________________________
http://tutorials.jenkov.com/java-regex/index.html#regular-expressions

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {
	public static void main(String[] args) {
		String text = "This is the text which is to be searched " + "for occurrences of the word 'is'.";

		String regex = "is";

		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(text);

		int count = 0;
		while (matcher.find()) {
			count++;
			System.out.println("found: " + count + " : " + matcher.start() + " - " + matcher.end());
		}
	}
}

Output:
found: 1 : 2 - 4
found: 2 : 5 - 7
found: 3 : 23 - 25
found: 4 : 70 - 72

Above is a Java regex example which uses the Matcher class to locate multiple occurrences of the substring "is" inside a text:
From the Pattern instance a Matcher instance is obtained. Via this Matcher instance the example finds all occurrences of the regular expression in the text.
__________________________________________________________________________
https://www.geeksforgeeks.org/regular-expressions-in-java/

// A Simple Java program to demonstrate working of 
// Pattern.matches() in Java 
import java.util.regex.Pattern; 

class Demo 
{ 
	public static void main(String args[]) 
	{ 
		// Following line prints "true" because the whole 
		// text "geeksforgeeks" matches pattern "geeksforge*ks" 
		System.out.println (Pattern.matches("geeksforge*ks", 
											"geeksforgeeks")); 

		// Following line prints "false" because the whole 
		// text "geeksfor" doesn't match pattern "g*geeks*" 
		System.out.println (Pattern.matches("g*geeks*", 
											"geeksfor")); 
	} 
}
Output:
true
false
--------------------------------------------------------------------------

// A Simple Java program to demonstrate working of 
// String matching in Java 
import java.util.regex.Matcher; 
import java.util.regex.Pattern; 

class Demo 
{ 
	public static void main(String args[]) 
	{ 
		// Create a pattern to be searched 
		Pattern pattern = Pattern.compile("geeks"); 

		// Search above pattern in "geeksforgeeks.org" 
		Matcher m = pattern.matcher("geeksforgeeks.org"); 

		// Print starting and ending indexes of the pattern 
		// in text 
		while (m.find()) 
			System.out.println("Pattern found from " + m.start() + 
							" to " + (m.end()-1)); 
	} 
} 

Output:
Pattern found from 0 to 4
Pattern found from 8 to 12
--------------------------------------------------------------------------
//A Simple Java program to demonstrate working of 
//String matching in Java 
import java.util.regex.Matcher; 
import java.util.regex.Pattern; 

class Demo 
{ 
	public static void main(String args[]) 
	{ 
		// Create a pattern to be searched 
		Pattern pattern = Pattern.compile("ge*"); 

		// Search above pattern in "geeksforgeeks.org" 
		Matcher m = pattern.matcher("geeksforgeeks.org"); 

		// Print starting and ending indexes of the pattern 
		// in text 
		while (m.find()) 
			System.out.println("Pattern found from " + m.start() + 
							" to " + (m.end()-1)); 
	} 
} 

Output:
Pattern found from 0 to 2
Pattern found from 8 to 10
Pattern found from 16 to 16
--------------------------------------------------------------------------
//A Simple Java program to demonstrate working of 
//String matching in Java ( Case Insensitive Searching )
import java.util.regex.Matcher; 
import java.util.regex.Pattern; 

class Demo 
{ 
	public static void main(String args[]) 
	{ 
		// Create a pattern to be searched 
		Pattern pattern = 
		Pattern.compile("ge*", Pattern.CASE_INSENSITIVE); 

		// Search above pattern in "geeksforgeeks.org" 
		Matcher m = pattern.matcher("GeeksforGeeks.org"); 

		// Print starting and ending indexes of the pattern 
		// in text 
		while (m.find()) 
			System.out.println("Pattern found from " + m.start() + 
							" to " + (m.end()-1)); 
	} 
} 
Output:
Pattern found from 0 to 2
Pattern found from 8 to 10
Pattern found from 16 to 16
--------------------------------------------------------------------------
//demonstrate working of split() to split a text based on a delimiter pattern
import java.util.regex.Pattern; 

class Demo 
{ 
	public static void main(String args[]) 
	{ 
		String text = "geeks1for2geeks3"; 

		// Specifies the string pattern which is to be searched 
		String delimiter = "\\d"; 
		Pattern pattern = Pattern.compile(delimiter, 
										Pattern.CASE_INSENSITIVE); 

		// Used to perform case insensitive search of the string 
		String[] result = pattern.split(text); 


		for (String temp: result) 
			System.out.println(temp); 
	} 
}
Output:
geeks
for
geeks
__________________________________________________________________________